#include <stdio.h>
#include <stdlib.h>

typedef struct nodo
{
    int dato;
    struct nodo *sig;
}TNODO;


void menu();
TNODO* Crea_Nodo(int info);
int Muestra_Lista(TNODO *Cab);
void Pide_Numero(int *numero);
int Inserta_Inicio(TNODO **cabeza, int info);
int Inserta_Final(TNODO **Cab, int info);
int Elimina_Inicio(TNODO **Cab);
int Elimina_Final(TNODO **Cab);


int main()
{
    menu();
    return 0;
}

void menu()
{
    TNODO* cabeza = NULL;
    int num, verifica;
    printf("\tListas Simples\n");
    int op;
    do
    {
        printf("\n\tMenu\n");
        printf("1.-Muestra Lista\n2.-Inserta Inicio\n3.-Inserta Final\n");
        printf("4.-Elimina Inicio\n5.-Elimina Final\n6.-Salir\n");
        printf("Teclee la opcion deseada\n");
        scanf("%d", &op);
        system("cls");
        switch(op)
        {
        case 1:
            verifica=Muestra_Lista(cabeza);
            if(verifica==0)
            {
                printf("\n\tLa Lista esta Vacia\n\n");
            }
            else
            {
                printf("\n\tAccion realizada con exito\n\n");
            }
            break;
        case 2:
            Pide_Numero(&num);
            verifica=Inserta_Inicio(&cabeza, num);
            if(verifica==0)
            {
                printf("\n\tFallo al realizar la accion\n\n");
            }
            else
            {
                printf("\n\tAccion realizada con exito\n\n");
            }
            break;
        case 3:
            Pide_Numero(&num);
            verifica=Inserta_Final(&cabeza, num);
            if(verifica==0)
            {
                printf("\n\tFallo al realizar la accion\n\n");
            }
            else
            {
                printf("\n\tAccion realizada con exito\n\n");
            }
            break;
        case 4:
            verifica=Elimina_Inicio(&cabeza);
            if(verifica==0)
            {
                printf("\n\tLa Lista esta vacia\n\n");
            }
            else
            {
                printf("\n\tAccion realizada con exito\n\n");
            }
            break;
        case 5:
            verifica=Elimina_Final(&cabeza);
            if(verifica==0)
            {
                printf("\n\tLa Lista esta vacia\n\n");
            }
            else
            {
                printf("\n\tAccion realizada con exito\n\n");
            }
            break;
        }
    }
    while(op!=6);
}

TNODO* Crea_Nodo(int info)
{
    TNODO *nuevo = NULL;
    nuevo=(TNODO *)malloc(sizeof(TNODO));
    if(nuevo)
    {
        nuevo->dato = info;
        nuevo->sig = NULL;
    }
    return nuevo;
}

int Muestra_Lista(TNODO *Cab)
{
    printf("\n");
    TNODO *aux = Cab;
    if(Cab)
    {
        while(aux != NULL)
        {
            printf("[%d]  ", aux->dato);
            aux = aux->sig;
        }
        return 1;
    }
    return 0;
    printf("\n\n");
}

void Pide_Numero(int *numero)
{
    printf("\nInserte un numero:\t");
    scanf("%d", numero);
}

int Inserta_Inicio(TNODO **cab, int info)
{
    TNODO* nuevo=NULL;
    nuevo=Crea_Nodo(info);
    if(nuevo!=NULL)
    {
        nuevo->sig = *cab;
        *cab = nuevo;
        return 1;
    }
    return 0;
}

int Inserta_Final(TNODO **Cab, int info)
{
    TNODO* nuevo = NULL;
    TNODO* aux = *Cab;
    nuevo = Crea_Nodo(info);
    if(nuevo)
    {
        while(aux->sig != NULL)
        {
            aux = aux->sig;
        }
        aux->sig = nuevo;
        return 1;
    }
    return 0;
}

int Elimina_Inicio(TNODO **Cab)
{
    if(*Cab)
    {
        TNODO *aux = *Cab;
        *Cab = (*Cab)->sig;
        free(aux);
        return 1;
    }
    return 0;
}

int Elimina_Final(TNODO **Cab)
{
    TNODO *aux1, *aux2;
    aux1 = *Cab;
    if(*Cab)
    {
        while(aux1->sig != NULL)
        {
            aux2 = aux1;
            aux1 = aux1->sig;
        }
        if(aux1 == *Cab)
        {
            *Cab = NULL;

        }
        free(aux1);
        aux2->sig = NULL;
        return 1;
    }
    return 0;
}
